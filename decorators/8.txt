You're exploring **stackable decorators**, and this is an excellent example! Let's break down exactly **how it runs behind the scenes** step by step.

---

## üîÅ Stackable Decorators

In this example:

```python
@log_calls
@timer
def slow_add(a, b):
```

Python applies the decorators from **bottom to top**, like this:

```python
slow_add = log_calls(timer(slow_add))
```

---

Similarly:

```python
@timer
@log_calls
def slow_multiply(a, b):
```

Is equivalent to:

```python
slow_multiply = timer(log_calls(slow_multiply))
```

---

## üì¶ Full Behind-the-Scenes Breakdown

### 1. `@log_calls @timer slow_add` becomes:

```python
# Original function
def slow_add(a, b):
    time.sleep(1)
    return a + b

# Decorate
step1 = timer(slow_add)        # adds timing logic
slow_add = log_calls(step1)    # wraps that with logging logic
```

#### Final `slow_add` call stack:

```text
You call:          slow_add(3, 4)
Calls:             log_calls(wrapper) ‚Üí timer(wrapper) ‚Üí original slow_add()
```

So:

1. `log_calls` logs "Calling slow\_add"
2. `timer` times the execution
3. Original function runs
4. `timer` prints time
5. `log_calls` logs the return value

---

### 2. `@timer @log_calls slow_multiply` becomes:

```python
# Original function
def slow_multiply(a, b):
    time.sleep(1)
    return a * b

# Decorate
step1 = log_calls(slow_multiply)  # adds logging first
slow_multiply = timer(step1)      # then wraps that with timer
```

#### Final `slow_multiply` call stack:

```text
You call:           slow_multiply(3, 4)
Calls:              timer(wrapper) ‚Üí log_calls(wrapper) ‚Üí original slow_multiply()
```

So:

1. `timer` starts timing
2. `log_calls` logs call
3. Original function runs
4. `log_calls` logs return value
5. `timer` prints time

---

## üß† Order Matters!

| Decorator Order     | Outer Decorator | Inner Decorator | What happens first |
| ------------------- | --------------- | --------------- | ------------------ |
| `@log_calls @timer` | log\_calls      | timer           | Log, then time     |
| `@timer @log_calls` | timer           | log\_calls      | Time, then log     |

---

## üîç Output Example:

### For `slow_add(3, 4)`:

```text
=== slow_add ===
[LOG] Calling wrapper with args=(3, 4), kwargs={}
[TIMER] slow_add took 1.0001 seconds
[LOG] wrapper returned 7
```

(You see `wrapper` instead of `slow_add` because function name isn't preserved unless you use `functools.wraps()`.)

---

### For `slow_multiply(3, 4)`:

```text
=== slow_multiply ===
[TIMER] wrapper took 1.0002 seconds
[LOG] Calling slow_multiply with args=(3, 4), kwargs={}
[LOG] slow_multiply returned 12
```

---

## ‚úÖ Tip: Preserve Function Name Using `functools.wraps`

To avoid seeing `wrapper` as the name, use:

```python
from functools import wraps

def log_calls(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        ...
    return wrapper
```

---

Let me know if you want me to diagram this with arrows showing the flow!



Perfect ‚Äî let's walk through the **`slow_add` function** with stacked decorators **`@log_calls @timer`** in complete detail and super simple steps.

---

## ‚úÖ Original Function

```python
@log_calls
@timer
def slow_add(a, b):
    time.sleep(1)
    return a + b
```

---

### ü§Ø What Python does behind the scenes:

Python **replaces** your function step-by-step like this (from bottom to top):

### üîπ Step 1: Apply `@timer`

```python
# This runs first
temp = timer(slow_add)
```

* `timer` is called and passed the original `slow_add`
* It returns a new function `wrapper`, which:

  * Starts a timer
  * Calls `slow_add`
  * Ends the timer
  * Prints time taken
  * Returns the result

Now:

```python
# So temp is the new wrapped version of slow_add
# (but it still calls the original slow_add inside)
```

---

### üîπ Step 2: Apply `@log_calls`

```python
# Then this wraps the timer-wrapped version
slow_add = log_calls(temp)
```

* `log_calls` takes `temp` (the result of `timer(slow_add)`)
* It returns a **new `wrapper`** which:

  * Logs the function name and arguments before the call
  * Calls `temp` (which includes timer logic)
  * Logs the result after the call
  * Returns the result

So final structure:

```python
slow_add = log_calls(timer(original_slow_add))
```

---

### üß† FUNCTION CHAIN

When you run:

```python
slow_add(3, 4)
```

You're actually calling:

```python
log_calls(timer(original_slow_add))(3, 4)
```

Which means:

1. `log_calls.wrapper(3, 4)` runs:

   * Logs: `Calling wrapper with args=(3, 4)`
2. Inside `log_calls.wrapper`, it calls `timer.wrapper(3, 4)`:

   * Starts the timer
   * Calls the **original** `slow_add(3, 4)`
   * Ends the timer
   * Prints time taken
3. Control goes back to `log_calls.wrapper`

   * Logs the returned value
   * Returns the value to caller

---

## üì¶ Step-by-step Output Flow for `slow_add(3, 4)`

```python
print("=== slow_add ===")
slow_add(3, 4)
```

### üßæ Behind the scenes:

1. `log_calls.wrapper` called:

   ```
   [LOG] Calling wrapper with args=(3, 4), kwargs={}
   ```

2. Inside it, `timer.wrapper` runs:

   * Calls the original `slow_add(3, 4)` ‚Üí sleeps 1 second
   * Measures time taken:

     ```
     [TIMER] slow_add took 1.0000 seconds
     ```

3. Returns value `7` to `log_calls.wrapper`, which prints:

   ```
   [LOG] wrapper returned 7
   ```

---

## üí° Why You See `wrapper` Instead of `slow_add`

Both decorators define their inner function as `wrapper`.

```python
def wrapper(...): ...
```

Unless you do this:

```python
from functools import wraps

@wraps(func)
def wrapper(...):
```

Python loses the original function‚Äôs name.

---

### ‚úÖ Final Output Example:

```text
=== slow_add ===
[LOG] Calling wrapper with args=(3, 4), kwargs={}
[TIMER] slow_add took 1.0001 seconds
[LOG] wrapper returned 7
```

---

Would you like a diagram showing the wrapper stacking visually?


Yes, **decorators are applied from bottom to top** (i.e., the one closest to the function is applied first).

---

### üîÅ Let's look at your example:

```python
@log_calls
@timer
def slow_add(a, b):
    time.sleep(1)
    return a + b
```

This is **equivalent to**:

```python
def slow_add(a, b):
    time.sleep(1)
    return a + b

slow_add = log_calls(timer(slow_add))
```

---

### üîç Step-by-step execution:

1. `@timer` wraps `slow_add`
   ‚Üí Now `slow_add` is a `wrapper` that **measures execution time**.

2. Then `@log_calls` wraps **the already wrapped version**
   ‚Üí Now it's a `wrapper` that **logs the call** and then calls the timer wrapper.

---

### üß† Execution Order When You Call `slow_add(3, 4)`:

* `log_calls.wrapper` is entered:

  * Logs: `"Calling slow_add with args=(3, 4)"`
  * Calls the **inner** `timer.wrapper`

    * Starts timer
    * Calls actual `slow_add` function (sleeps 1 second)
    * Ends timer
    * Prints `"took 1.000x seconds"`
    * Returns result to `log_calls`
  * Logs: `"slow_add returned 7"`
  * Returns the result

---

### üîÅ Final Execution Flow:

```text
log_calls.wrapper
  ‚Üí timer.wrapper
    ‚Üí actual slow_add
```

So yes ‚Äî **decorators apply bottom to top, but execute top to bottom** in the resulting nested wrappers.

Let me know if you want me to draw a flow diagram or generate visuals for this.
